/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.browserAutomation.Launch
import org.xtext.example.mydsl.browserAutomation.Find
import org.xtext.example.mydsl.browserAutomation.Model
import org.xtext.example.mydsl.browserAutomation.Click
import org.xtext.example.mydsl.browserAutomation.Set
import org.xtext.example.mydsl.browserAutomation.Affectation
import org.xtext.example.mydsl.browserAutomation.VarRef

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BrowserAutomationGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	fsa.generateFile('Test.java', 
			resource.allContents
			.filter(Model)
			.head			
			.generateModel)
	}
	
	def  generateModel(Model m)'''import org.junit.jupiter.api.Test;
	import org.openqa.selenium.By;
	import org.openqa.selenium.WebDriver;
	import org.openqa.selenium.WebElement;
	import org.openqa.selenium.firefox.FirefoxDriver;
	import org.openqa.selenium.support.ui.ExpectedConditions;
	import org.openqa.selenium.support.ui.WebDriverWait;
	
	import java.util.HashMap;
	
	import static org.junit.jupiter.api.Assertions.assertNotNull;
	import static org.junit.jupiter.api.Assertions.assertTrue;
	
	
	
	
	
	
	 @Test
	 public void test() {
	 System.setProperty("webdriver.gecko.driver","C:/Users/cocop/Downloads/geckodriver-v0.26.0-win64/geckodriver.exe");
	 WebDriver driver = new FirefoxDriver();
	 «generateLaunch(m.tisi1.get(0))»
	 «FOR s : m.tisi4»
	 «generateSet(s,m.tisi4.indexOf(s))»
	 «ENDFOR»    
	 «FOR c : m.tisi5»
	    «generateClick(c)»
	 «ENDFOR» 
	 «FOR f : m.tisi6»
	  	«generateFind(f)»
	 «ENDFOR»       
	 driver.close();
			}
		}
	'''
	    
		
	
	def generateLaunch(Launch l )'''
	driver.get("«l.u.name»");
	'''
	def generateFind(Find f)'''
	«IF f.v === null »
	new WebDriverWait(driver, 5).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[contains(.,'«f.s»')]")));
	assertTrue(driver.getPageSource().contains("«f.s»"));
	«ENDIF»
	«IF f.v instanceof VarRef »
	new WebDriverWait(driver, 5).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[contains(.,'«f.s»')]")));
    assertTrue(driver.getPageSource().contains("«f.v.va.name»"));
    «ENDIF»   
	'''
	def generateClick(Click click)'''
	«IF click.c.name == 'link' && click.v === null »
	     WebElement button = driver.findElement(By.xpath(String.format("//a[contains(.,«click.s»)]")));
	     driver.get(button.getAttribute("href"));
	«ENDIF» 
	
	«IF click.c.name == 'link' && click.v instanceof VarRef »
		    WebElement button = driver.findElement(By.xpath("//a[@«click.a.name»='"+«click.v.va.name»+"']"));
		    driver.get(button.getAttribute("href"));
	«ENDIF»   
	
	«IF click.c.name == 'image' »
		driver.findElement(By.xpath(String.format("//img[contains(@«click.a»,«click.s»)]"))).click();
	«ENDIF»
	«IF click.c.name == 'button' »
	driver.findElement(By.xpath("//input[@«click.a.name»='«click.s»']")).submit();	
	«ENDIF»         
	 	
	'''
	
	def generateSet(Set s,int i)'''
	«IF s.a1.name == 'id' »
	WebElement input = driver.findElement(By.id("«s.s2»"));
	input.sendKeys("«s.s1»");
	«ENDIF» 
	«IF s.a1.name == 'Content' »
	String id«i» = driver.findElement(By.xpath("//label[contains(., '«s.s2»')]")).getAttribute("for");
	driver.findElement(By.id(id«i»)).sendKeys(Keys.SPACE);
    «ENDIF»
	'''
	
	
	def generateAffectation (Affectation aff) '''
	«IF aff.a.name == 'content' »
	String «aff.v_name.name» = driver.findElement(By.className("«aff.s1»")).getText();
	«ENDIF»
	
	'''
}


