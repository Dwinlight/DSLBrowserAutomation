/*
 * generated by Xtext 2.19.0
 */
grammar InternalBrowserAutomation;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.BrowserAutomationGrammarAccess;

}
@parser::members {
	private BrowserAutomationGrammarAccess grammarAccess;

	public void setGrammarAccess(BrowserAutomationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getTisiAssignment()); }
		(rule__Model__TisiAssignment)*
		{ after(grammarAccess.getModelAccess().getTisiAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTest
entryRuleTest
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestAccess().getGroup()); }
		(rule__Test__Group__0)
		{ after(grammarAccess.getTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBrowser
entryRuleBrowser
:
{ before(grammarAccess.getBrowserRule()); }
	 ruleBrowser
{ after(grammarAccess.getBrowserRule()); } 
	 EOF 
;

// Rule Browser
ruleBrowser 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBrowserAccess().getNameAssignment()); }
		(rule__Browser__NameAssignment)
		{ after(grammarAccess.getBrowserAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUrl
entryRuleUrl
:
{ before(grammarAccess.getUrlRule()); }
	 ruleUrl
{ after(grammarAccess.getUrlRule()); } 
	 EOF 
;

// Rule Url
ruleUrl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUrlAccess().getNameAssignment()); }
		(rule__Url__NameAssignment)
		{ after(grammarAccess.getUrlAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribut
entryRuleAttribut
:
{ before(grammarAccess.getAttributRule()); }
	 ruleAttribut
{ after(grammarAccess.getAttributRule()); } 
	 EOF 
;

// Rule Attribut
ruleAttribut 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributAccess().getNameAssignment()); }
		(rule__Attribut__NameAssignment)
		{ after(grammarAccess.getAttributAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getONKeyword_0()); }
	'ON'
	{ after(grammarAccess.getTestAccess().getONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getBAssignment_1()); }
	(rule__Test__BAssignment_1)
	{ after(grammarAccess.getTestAccess().getBAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getGOTOKeyword_2()); }
	'GOTO'
	{ after(grammarAccess.getTestAccess().getGOTOKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__3__Impl
	rule__Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getUAssignment_3()); }
	(rule__Test__UAssignment_3)
	{ after(grammarAccess.getTestAccess().getUAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__4__Impl
	rule__Test__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getISKeyword_4()); }
	'IS'
	{ after(grammarAccess.getTestAccess().getISKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__5__Impl
	rule__Test__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getATTRIBUTKeyword_5()); }
	'ATTRIBUT'
	{ after(grammarAccess.getTestAccess().getATTRIBUTKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__6__Impl
	rule__Test__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getA1Assignment_6()); }
	(rule__Test__A1Assignment_6)
	{ after(grammarAccess.getTestAccess().getA1Assignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__7__Impl
	rule__Test__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getWHEREKeyword_7()); }
	'WHERE'
	{ after(grammarAccess.getTestAccess().getWHEREKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__8__Impl
	rule__Test__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getATTRIBUTKeyword_8()); }
	'ATTRIBUT'
	{ after(grammarAccess.getTestAccess().getATTRIBUTKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__9__Impl
	rule__Test__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getA2Assignment_9()); }
	(rule__Test__A2Assignment_9)
	{ after(grammarAccess.getTestAccess().getA2Assignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__10__Impl
	rule__Test__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getCONTAINSKeyword_10()); }
	'CONTAINS'
	{ after(grammarAccess.getTestAccess().getCONTAINSKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__11__Impl
	rule__Test__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getQuotationMarkKeyword_11()); }
	'"'
	{ after(grammarAccess.getTestAccess().getQuotationMarkKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__12__Impl
	rule__Test__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getSTRINGTerminalRuleCall_12()); }
	RULE_STRING
	{ after(grammarAccess.getTestAccess().getSTRINGTerminalRuleCall_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getQuotationMarkKeyword_13()); }
	'"'
	{ after(grammarAccess.getTestAccess().getQuotationMarkKeyword_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TisiAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTisiTestParserRuleCall_0()); }
		ruleTest
		{ after(grammarAccess.getModelAccess().getTisiTestParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__BAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getBBrowserParserRuleCall_1_0()); }
		ruleBrowser
		{ after(grammarAccess.getTestAccess().getBBrowserParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__UAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getUUrlParserRuleCall_3_0()); }
		ruleUrl
		{ after(grammarAccess.getTestAccess().getUUrlParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__A1Assignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getA1AttributParserRuleCall_6_0()); }
		ruleAttribut
		{ after(grammarAccess.getTestAccess().getA1AttributParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__A2Assignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getA2AttributParserRuleCall_9_0()); }
		ruleAttribut
		{ after(grammarAccess.getTestAccess().getA2AttributParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Browser__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrowserAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getBrowserAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Url__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUrlAccess().getNameSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getUrlAccess().getNameSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribut__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
